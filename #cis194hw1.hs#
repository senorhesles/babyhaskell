
import Prelude
toDigits :: Integer -> [Integer]
toDigits x
  | x > 0 = toDigits (x `div` 10) ++ [x `mod` 10]
  | otherwise = []

toDigitsRev:: Integer -> [Integer]
toDigitsRev x = reverse (toDigits x)

doubleEveryOther :: [Integer] -> [Integer]
doubleEveryOther [] = []
doubleEveryOther (x:(y:zs)) = x : y*2 : doubleEveryOther zs

toDigitsList :: [Integer] -> [Integer]
toDigitsList [] = []
toDigitsList (x:xs) = toDigits x ++ toDigitsList xs

sumDigits :: [Integer] -> Integer
sumDigits [] = 0
sumDigits (x:xs) = foldr (+) 0 $ toDigitsList (x:xs)

validate :: Integer -> Bool
validate x = (sumDigits $ toDigitsList $ doubleEveryOther $ toDigitsRev x) `mod` 10 == 0

type Peg = String
type Move = (Peg, Peg)

hanoi :: Integer -> Peg -> Peg -> Peg -> [Move]
hanoi 0 _ _ _ = []
hanoi 1 a b _ = [(a, b)]
hanoi n a b c = (hanoi (n-1) a c b) ++ (hanoi 1 a b c) ++ (hanoi (n-1) c b a)

hanoi2 :: Integer -> Peg -> Peg -> Peg -> [Move]
hanoi2 0 _ _ _ = []
hanoi2 n a b c =
  let
    step1moves = hanoi2 (n-1) a c b
    step2move = (a, b)
    step3moves = hanoi (n-1) c b a
  in
   step1moves ++ [step2move] ++ step3moves
