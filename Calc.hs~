
import Prelude
import ExprT
import Parser
import Data.List

class Listable a where
  toList :: a -> [Int]

instance Listable Int where
  toList x = [x]

instance Listable Bool where
  toList True = [1]
  toList False = [0]

data Tree a = Empty | Node a (Tree a) (Tree a)


  


eval :: ExprT -> Integer
eval (Mul x y) = (eval x) * (eval y)
eval (Add x y) = (eval x) + (eval y)
eval (Lit x) = x

justEval :: Maybe ExprT -> Maybe Integer
justEval Nothing = Nothing
justEval (Just x) = Just (eval x)


evalStr :: String -> Maybe Integer
evalStr x =
  let
    parsed = parseExp Lit Add Mul x
  in
   justEval parsed
