{-# OPTIONS_GHC -Wall #-}
{-# OPTIONS_GHC -fno-warn-missing-methods #-}

{-# LANGUAGE FlexibleInstances #-}


fib :: Integer -> Integer
fib 0 = 0
fib 1 = 1
fib n = (fib (n - 1)) + (fib (n - 2))

fibs1 :: [Integer]
fibs1 = [0] ++ map fib [1..]

fib2 :: [Integer] -> [Integer]
fib2 xs = xs ++ [((last xs) + (last $ init xs))]

fibs2' :: [Integer]
fibs2' = fibgen 0 1 where
  fibgen a b = a : fibgen b (a + b)

data Stream a = Cons a (Stream a) deriving Show

streamToList :: Stream a -> [a]
streamToList (Cons x _)  = repeat x

streamRepeat :: a -> Stream a
streamRepeat x = Cons x (streamRepeat x)

streamMap :: (a -> b) -> Stream a -> Stream b
streamMap f (Cons x y) = Cons (f x) (streamMap f y)

streamFromSeed :: (a -> a) -> a -> Stream a
streamFromSeed f x = Cons (f x) (streamFromSeed f (f x))

natsNoZero :: Stream Integer
natsNoZero = streamFromSeed (+1) 1

largestTwo :: Integer -> Integer -> Integer
largestTwo x y
  | odd x = y
  | otherwise = largestTwo (x `div` 2) (y+1)

interLeaveStreams :: Stream a -> Stream a -> Stream a
interLeaveStreams (Cons x y) (Cons z w) = (Cons x (Cons z (interLeaveStreams y w)))

ruler :: Stream Integer
ruler = streamMap (\x -> largestTwo x 0) natsNoZero

ruler' :: Stream Integer
ruler' = startRuler 0

startRuler :: Integer -> Stream Integer
startRuler y = interLeaveStreams (streamRepeat y) (startRuler (y+1))

xstream :: Stream Integer
xstream = streamFromSeed (\y -> y + 1^(y+1)) 1

instance Num Stream a where
  